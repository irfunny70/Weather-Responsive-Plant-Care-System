
import time
import RPi.GPIO as GPIO
import board
import busio
from adafruit_ssd1306 import SSD1306_I2C
from PIL import Image, ImageDraw, ImageFont

SERVO_PIN = 17
BUTTON_PIN = 27
LDR_PIN = 13
TRIG = 23
ECHO = 24
BUZZER_PIN = 22


WATER_LEVEL_THRESHOLD = 10  # cm


GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(SERVO_PIN, GPIO.OUT)
GPIO.setup(BUTTON_PIN, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(LDR_PIN, GPIO.IN)
GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)
GPIO.setup(BUZZER_PIN, GPIO.OUT)


servo = GPIO.PWM(SERVO_PIN, 50)
servo.start(0)


WIDTH = 128
HEIGHT = 64
i2c = busio.I2C(board.SCL, board.SDA)
oled = SSD1306_I2C(WIDTH, HEIGHT, i2c)
oled.fill(0)
oled.show()
image = Image.new("1", (WIDTH, HEIGHT))
draw = ImageDraw.Draw(image)
font = ImageFont.load_default()


def set_valve(open_valve):
    if open_valve:
        print("Opening valve...")
        servo.ChangeDutyCycle(7)
    else:
        print("Closing valve...")
        servo.ChangeDutyCycle(2)
    time.sleep(1)
    servo.ChangeDutyCycle(0)

def get_manual_input():
    try:
        temp = float(input("Enter temperature (C): "))
        hum = float(input("Enter humidity (%): "))
        return temp, hum
    except ValueError:
        print("Invalid input. Using fallback.")
        return 32.0, 70.0

def get_distance():
    GPIO.output(TRIG, False)
    time.sleep(0.05)
    GPIO.output(TRIG, True)
    time.sleep(0.00001)
    GPIO.output(TRIG, False)

    start_time = time.time()
    stop_time = time.time()

    timeout = time.time() + 0.1
    while GPIO.input(ECHO) == 0:
        start_time = time.time()
        if time.time() > timeout:
            return -1

    timeout = time.time() + 0.1
    while GPIO.input(ECHO) == 1:
        stop_time = time.time()
        if time.time() > timeout:
            return -1

    elapsed = stop_time - start_time
    distance = (elapsed * 34300) / 2
    return distance

def display_oled(temp, hum, valve_open, mode, water_level_text):
    draw.rectangle((0, 0, WIDTH, HEIGHT), outline=0, fill=0)
    draw.text((0, 0), f"Mode: {mode}", font=font, fill=255)
    draw.text((0, 12), f"Temp: {temp:.1f} C", font=font, fill=255)
    draw.text((0, 24), f"Humidity: {hum:.1f} %", font=font, fill=255)
    draw.text((0, 36), f"Valve: {'OPEN' if valve_open else 'CLOSED'}", font=font, fill=255)
    draw.text((0, 48), water_level_text, font=font, fill=255)
    oled.image(image)
    oled.show()


try:
    valve_open = False

    while True:
        is_day = GPIO.input(LDR_PIN) == 0
        dist = get_distance()

        if dist == -1:
            water_level_text = "Sensor error"
            GPIO.output(BUZZER_PIN, False)
        else:
            water_level_text = f"Water: {dist:.1f}cm"
            GPIO.output(BUZZER_PIN, dist > WATER_LEVEL_THRESHOLD)

        if is_day:
            print("Daytime: AUTO mode")
            mode = "AUTO"
            temp, hum = get_manual_input()

            if temp >= 35 and hum >= 90 and not valve_open:
                set_valve(True)
                valve_open = True
            elif temp <= 32 and hum <= 70 and valve_open:
                set_valve(False)
                valve_open = False
            else:
                print("No change in valve state.")

        else:
            print("Nighttime: MANUAL mode")
            mode = "MANUAL"
            if GPIO.input(BUTTON_PIN) == GPIO.HIGH:
                print("Button pressed: Watering...")
                set_valve(True)
                time.sleep(2)
                set_valve(False)

        display_oled(temp if is_day else 0, hum if is_day else 0, valve_open, mode, water_level_text)
        time.sleep(2)

except KeyboardInterrupt:
    print("Stopped by user.")

finally:
    servo.stop()
    GPIO.cleanup()
    oled.fill(0)
    oled.show()
